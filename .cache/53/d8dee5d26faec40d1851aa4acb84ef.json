{"id":"shader/fragment.glsl","dependencies":[{"name":"C:\\Users\\Sudhir Kumar\\Desktop\\New folder (2)\\three-js-scrolltriger\\package.json","includedInParent":true,"mtime":1717216087840}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D firstTexture;\\nuniform sampler2D texture2;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\nvarying vec4 vPosition;\\nvarying vec3 vNormal;\\n\\n// Simple hash function\\nfloat hash(vec2 p) {\\n    p = vec2(dot(p, vec2(127.1, 311.7)),\\n             dot(p, vec2(269.5, 183.3)));\\n    return -1.0 + 2.0 * fract(sin(p.x * 43758.5453123 + p.y * 37848.99837) * 43758.5453123);\\n}\\n\\n// 2D noise function\\nfloat noise(vec2 p) {\\n    vec2 i = floor(p);\\n    vec2 f = fract(p);\\n    \\n    vec2 u = f * f * (3.0 - 2.0 * f);\\n    \\n    return mix(mix(hash(i + vec2(0.0, 0.0)), hash(i + vec2(1.0, 0.0)), u.x),\\n               mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), u.x), u.y);\\n}\\n\\n// Lighting calculation\\nvec3 calculateLighting(vec3 normal, vec3 lightDir, vec3 lightColor) {\\n    float diff = max(dot(normal, lightDir), 0.0);\\n    return lightColor * diff;\\n}\\n\\nvoid main() {\\n    vec3 lightDir = normalize(vec3(0.902, 0.0745, 0.0745));\\n    vec3 lightColor = vec3(0.4039, 0.2784, 0.8549);\\n    \\n    // Normalized normal\\n    vec3 norm = normalize(vNormal);\\n    \\n    // Calculate lighting\\n    vec3 lighting = calculateLighting(norm, lightDir, lightColor);\\n\\n    // Get texture color\\n    vec4 txt = texture2D(firstTexture, vUv);\\n\\n    // Adding dynamic flow effect to the texture\\n    vec2 flowUv = vUv + vec2(sin(time * 0.5), cos(time * 0.5)) * 0.05;\\n    vec4 flowTxt = texture2D(firstTexture, flowUv);\\n\\n    // Adding bright noise\\n    float n = noise(vUv * 10.0 + time * 0.1);\\n    vec3 noiseColor = vec3(n * 0.5 + 0.5);\\n\\n    // Brightening the texture color\\n    vec3 brightColor = flowTxt.rgb * 1.5;\\n\\n    // Mix the bright texture color with the noise color\\n    vec3 finalColor = mix(brightColor, noiseColor, 0.3);\\n    \\n    // Combine texture color with lighting effect\\n    finalColor = mix(finalColor, lighting, 0.5);\\n\\n    // Ensure the final color is bright and visible\\n    finalColor = clamp(finalColor * 1.5, 0.0, 1.0);\\n\\n    gl_FragColor = vec4(finalColor, 1.0);\\n}\\n\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"shader/fragment.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"shader/fragment.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"shader/fragment.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"shader/fragment.glsl","original":{"line":1,"column":14}},{"generated":{"line":1,"column":17},"source":"shader/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":2101},"source":"shader/fragment.glsl","original":{"line":1,"column":2099}}],"sources":{"shader/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D firstTexture;\\nuniform sampler2D texture2;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\nvarying vec4 vPosition;\\nvarying vec3 vNormal;\\n\\n// Simple hash function\\nfloat hash(vec2 p) {\\n    p = vec2(dot(p, vec2(127.1, 311.7)),\\n             dot(p, vec2(269.5, 183.3)));\\n    return -1.0 + 2.0 * fract(sin(p.x * 43758.5453123 + p.y * 37848.99837) * 43758.5453123);\\n}\\n\\n// 2D noise function\\nfloat noise(vec2 p) {\\n    vec2 i = floor(p);\\n    vec2 f = fract(p);\\n    \\n    vec2 u = f * f * (3.0 - 2.0 * f);\\n    \\n    return mix(mix(hash(i + vec2(0.0, 0.0)), hash(i + vec2(1.0, 0.0)), u.x),\\n               mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), u.x), u.y);\\n}\\n\\n// Lighting calculation\\nvec3 calculateLighting(vec3 normal, vec3 lightDir, vec3 lightColor) {\\n    float diff = max(dot(normal, lightDir), 0.0);\\n    return lightColor * diff;\\n}\\n\\nvoid main() {\\n    vec3 lightDir = normalize(vec3(0.902, 0.0745, 0.0745));\\n    vec3 lightColor = vec3(0.4039, 0.2784, 0.8549);\\n    \\n    // Normalized normal\\n    vec3 norm = normalize(vNormal);\\n    \\n    // Calculate lighting\\n    vec3 lighting = calculateLighting(norm, lightDir, lightColor);\\n\\n    // Get texture color\\n    vec4 txt = texture2D(firstTexture, vUv);\\n\\n    // Adding dynamic flow effect to the texture\\n    vec2 flowUv = vUv + vec2(sin(time * 0.5), cos(time * 0.5)) * 0.05;\\n    vec4 flowTxt = texture2D(firstTexture, flowUv);\\n\\n    // Adding bright noise\\n    float n = noise(vUv * 10.0 + time * 0.1);\\n    vec3 noiseColor = vec3(n * 0.5 + 0.5);\\n\\n    // Brightening the texture color\\n    vec3 brightColor = flowTxt.rgb * 1.5;\\n\\n    // Mix the bright texture color with the noise color\\n    vec3 finalColor = mix(brightColor, noiseColor, 0.3);\\n    \\n    // Combine texture color with lighting effect\\n    finalColor = mix(finalColor, lighting, 0.5);\\n\\n    // Ensure the final color is bright and visible\\n    finalColor = clamp(finalColor * 1.5, 0.0, 1.0);\\n\\n    gl_FragColor = vec4(finalColor, 1.0);\\n}\\n\";"},"lineCount":null}},"error":null,"hash":"bff6105f21a9c1678507f630794599a4","cacheData":{"env":{}}}